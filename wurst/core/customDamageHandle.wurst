package customDamageHandle

import ClosureEvents
import DamageEvent
import LinkedList
import HashMap

let debug = true

//之前的版本大概的思路为模拟一模一样的伤害流程
//但是这种行为会严重影响性能和使用体验
//故而这里提供一种相对更简单的方式
//即使用看不见的工具人单位
//这些单位被存储在一个池中，到需要的时候会尝试从中提取作为伤害的发起者
//而伤害事件和伤害机制沿用原生的
//印象中wurst提供了一个叫做dummy的东西用了释放法术
//这里的功能有所不同，只是将伤害事件外包给一个临时单位
//以避免直接使用原单位给予伤害事件导致无限触发某些自定义的伤害事件
//工具人对象池的深浅将对该功能有巨大影响，需谨慎设置
//工具人的护甲等数据可能会对收到的伤害有影响，请选用合适的工具人
public abstract class DamageHandler
    //该函数会返回各项伤害计算的结果给到原生的伤害判定上
    //增伤减伤，暴击闪避格挡之类的请自己给出计算的算法和流程
    //会获取伤害来源的handler
    //输入的伤害为上一个伤害计算结果
    abstract function onDamage(DamageHandler source, real damage) returns real
    //该函数会返回一个受到伤害后的反馈
    //对于没有反弹，反射之类的实现的情况下，可以忽略该函数
    //会获取单位实例（可能获取到的是工具人单位，需要额外的判断）
    abstract function feedback(unit source)
    protected unit bindingUnit

public class DefaultDamageHandle extends DamageHandler
    //默认的管理器就是什么也不管
    //直接返回伤害数值
    //经由角色生成器生成的角色对象全部都拥有至少一个这个伤害管理器
    //注意：这个是为了行为统一而提供的额外抽象
    //当你实现了一个管理器的时候记得替换掉这个，而不是直接append
    override function onDamage(DamageHandler source, real damage) returns real
        return damage
    override function feedback(unit source)

